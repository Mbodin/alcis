
pair.$
bool.$

positive ::=
	| p 1
	| p 2 * positive
	| p 1 + 2 * positive
	.

?pa = ?pb :=
	(pa, pb)?(
	| p 1, p 1 -> true
	| p 2 * ?pa', p 2 * ?pb' -> pa' = pb'
	| p 1 + 2 * ?pa', p 1 + 2 * ?pb' -> pa' = pb'
	| _, _ -> false
	).

?pa >= ?pb :=
	(pa, pb)?(
	| _, p 1 -> true
	| p 1, _ -> false
	| (p 1 + 2 * ?pa' | p 2 * ?pa'), p 2 * ?pb' -> pa' >= pb'
	| p 1 + 2 * ?pa', p 1 + 2 * pb' -> pa' >= pb'
	| p 2 * ?pa', p 1 + 2 * pb' -> pa' >= pb' /\ ¬ pa' = pb'
	).
(?pa : positive) > pb := pa >= pb /\ ¬ pa = pb.
(?pa : positive) <= ?pb := pb >= pa.
(?pa : positive) < ?pb := pb > pa.

(* Successor *)
succ ?p :=
	p?(
	| p 1 -> p 2 * p 1
	| p 2 * ?p -> p 1 + 2 * p
	| p 1 + 2 * ?p -> p 2 * succ p
	).


integer ::=
	| 0
	| + positive
	| - positive
	.

1 := + p 1.

?ia >= ?ib :=
	(ia, ib)?(
	| (0 | + _), (0 | - _) -> true
	| (0 | - _), (0 | + _) -> false
	| + ?pa, + ?pb -> pa >= pb
	| - pa, - pb -> pb >= pa
	).
(?ia : integer) > ib := ia >= ib /\ ¬ ia = ib.
(?ia : integer) <= ?ib := ib >= ia.
(?ia : integer) < ?ib := ib > ia.

(* TODO: All the operators.  See https://coq.inria.fr/library/Coq.PArith.BinPosDef.html *)

?ia = ?ib :=
	(ia, ib)?(
	| 0, 0 -> true
	| + ?pa, + ?pb -> pa = pb
	| - ?pa, - ?pb -> pa = pb
	| _, _ -> false
	).

