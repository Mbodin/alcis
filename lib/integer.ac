
pair.|>
bool.|>
comparison.|>

positive ::=
	| p 1
	| p 2 * ?positive
	| p 1 + 2 * ?positive
	.

?pa <> ?pb :=
	(pa, pb)?(
	| p 1, p 1 -> =
	| p 1, _ -> <
	| _, p 1 -> >
	| p 2 * ?pa', p 2 * ?pb' -> pa' <> pb'
	| p 2 * ?pa', p 1 + 2 * ?pb' ->
		(pa' <> pb')?(
		| = -> <
		| ?r -> r
		)
	| p 1 + 2 * ?pa', p 1 + 2 * ?pb' -> pa' <> pb'
	| p 1 + 2 * ?pa', 2 * ?pb' ->
		(pa' <> pb')?(
		| = -> >
		| ?r -> r
		)
	).

(* Successor *)
succ ?p :=
	p?(
	| p 1 -> p 2 * p 1
	| p 2 * ?p -> p 1 + 2 * p
	| p 1 + 2 * ?p -> p 2 * succ p
	).


integer ::=
	| 0
	| + ?positive
	| - ?positive
	.

1 := + p 1.

?ia <> ?ib :=
	(ia, ib)?(
	| 0, 0 -> =
	| (- _ | 0), + _ -> <
	| (+ _ | 0), - _ -> >
	| + _, 0 -> >
	| - _, 0 -> <
	| + ?pa, + ?pb -> pa <> pb
	| - pa, - pb ->
		(pb <> pa)?(
		| = -> =
		| < -> >
		| > -> <
		)
	).

(< <> >).<|

(* TODO: All the operators.  See https://coq.inria.fr/library/Coq.PArith.BinPosDef.html *)

